local init_data = {}
local callbacks = {}

function send_ksp_http(cmd)
	url = init_data.ksp_server .. "/telemachus/datalink?" .. cmd
	-- print(url)
	return http.request(url)
end

function update_redstone_callbacks()
	for i,entry in pairs(callbacks) do
		entry.val = get_current_value(entry.side, entry.color)
		if entry.val ~= entry.lastval then
			entry.callback(entry)
		end
		entry.lastval = entry.val
	end
end

function get_current_value(side, color)
	if color then
		all_active_colors = redstone.getBundledInput(side)
		return colors.test(all_active_colors, color)
	else
		return rs.getInput(side)		
	end
end

-- http://computercraft.info/wiki/Colors_(API)
-- register a callback that is called when the given input CHANGES
function register_callback(side, color, callback, userdata)
	-- print("registering " .. side .. "/" .. color)
	entry = {}
	entry["side"] = side
	entry["color"] = color
	entry["callback"] = callback
	entry["userdata"] = userdata
	
	entry["lastval"] = get_current_value(side, color)
	entry["val"] = entry.lastval
	
	table.insert(callbacks, entry)
end

function build_ksp_vector6(x,y,z)
	return "["..x..","..y..","..z..",0,0,0]"
end

function on_toggle_change(entry)
	toggle_entry = entry.userdata
	print("t:(v=" .. (entry.val and "1" or "0") .. "):" .. toggle_entry.desc)
	
	if entry.val and toggle_entry.callback then
		toggle_entry.callback()
		return
	end
	
	if entry.val then
		cmd = toggle_entry.oncmd
	else
		cmd = toggle_entry.offcmd
	end

	if cmd then
		kspcmd = "ret=" .. cmd
		send_ksp_http(kspcmd)
	end
end

-- TODO: this won't work well if two people stand on two different pressure
-- plates at once.  Make it more friendly to that, needs to add the vectors together
function on_attitude_change(entry)
	attitude_entry = entry.userdata
	if attitude_entry == nil then
		error("attitude_entry not provided to callback via userdata")
	end
	
	print("a:(v=" .. (entry.val and "1" or "0") .. "):" .. attitude_entry.desc)
	
	fly_by_wire = false
	cmd_vector = nil
	
	if entry.val then
		fly_by_wire = true
		cmd_vector = attitude_entry.vector
	else
		fly_by_wire = false
		cmd_vector = build_ksp_vector6(0,0,0)
	end
	
	fbw = fly_by_wire and "1" or "0"
	kspcmd = "ret=v.setFbW[" .. fbw .. "]&ret2=v.setPitchYawRollXYZ" .. cmd_vector
	send_ksp_http(kspcmd)
end

function poll_ksp_telemetry()
	cmd = build_telem_query(init_data.telemetry_entries)
	send_ksp_http(cmd)
end

function build_telem_query(telem_entries)
	query = ""
	for i,telem_entry in pairs(telem_entries) do 
		if query ~= "" then
			query = query .. "&"
		end
		query = query .. telem_entry.short_name .. "=" .. telem_entry.ksp_cmd
	end
	--print(query)
	return query
end

function ghetto_as_hell_parse_json(json)
    processed_data = string.gsub(string.gsub(json, "\"", ""), ":", "=")

    -- not even remotely secure, never use for anything important EVAR.
    parsed = loadstring("return " .. processed_data)()
    return parsed
end

function process_http_response(response)
	-- responses can contain telemetry data, or nothing.
	-- ignore anything returned we're not actively looking for,
	-- and update things we are in fact looking for
	
	-- print(response)
	processed_data = string.gsub(string.gsub(response, "\"", ""), ":", "=")
	-- print(processed_data)
	http_data = ghetto_as_hell_parse_json(response)
	
	for i,telem_entry in pairs(init_data.telemetry_entries) do
		for k,v in pairs(http_data) do
			if telem_entry.short_name == k then
				update_telem_entry(telem_entry, v)
			end
		end
	end
end

function set_bundled_output_color(side, color, value)
	active_colors = redstone.getBundledOutput(side)
	if value == true then
		out = colors.combine(active_colors, color)
	else
		out = colors.subtract(active_colors, color)
	end
	redstone.setBundledOutput(side, out)
end

function update_telem_entry(telem_entry, value)
	telem_entry.val = value
	
	for i,trigger_entry in pairs(init_data.telemetry_triggers) do
		if trigger_entry.ksp_cmd == telem_entry.ksp_cmd then
			set_bundled_output_color(trigger_entry.side, trigger_entry.color, trigger_entry.test(value))
		end
	end
end

function render_ksp_telemetry()
	init_data.render_telem(init_data.telemetry_entries)
end

function init(init_data_in)
	init_data = init_data_in

	for i,entry in pairs(init_data.attitude_entries) do 
		register_callback(entry.side, entry.color, on_attitude_change, entry)
	end
	
	for i,entry in pairs(init_data.toggle_entries) do 
		register_callback(entry.side, entry.color, on_toggle_change, entry)
	end
	
	-- because lua can't deal with periods in names like v.orbitalVelocity, assign a bunch of aliases here
	i = 0
	for x,entry in pairs(init_data.telemetry_entries) do 
		entry.short_name = "a" .. i
		i = i + 1
	end
	
	print("Flight computer init complete")	
end

local main_loop_timer = nil
function start_main_loop_timer()
	main_loop_timer = os.startTimer(0.1)
end

-- update() called approx once per game tick
function update()
	poll_ksp_telemetry()
	render_ksp_telemetry()
end

function handle_keypress(key)
	if key == 25 then
		print_peripheral_names()
	elseif key == 16 then
		text = get_current_value("left", colors.pink) and "on" or "off"
		print("pink: " .. text)
	else
		print("keypress: " .. p1)
	end
end

function wait_for_events()
	event, p1, p2, p3, p4, p5 = os.pullEvent()
	if event == "redstone" then
		update_redstone_callbacks()
	elseif event == "key" then
		key = p1
		handle_keypress(key)
	elseif event == "timer" then
		timer = p1
		if timer == main_loop_timer then
			update()
			start_main_loop_timer()
		end
	elseif event == "http_success" then
		url = p1
		handle = p2
		response = handle.readAll()
		handle.close()
		process_http_response(response)
	end
end

function myerrorhandler( err )
   print( "ERROR:" .. err )
end

function print_peripheral_names()
	local periList = peripheral.getNames()
	for i = 1, #periList do
		print("peripheral names:")
		print("- "..peripheral.getType(periList[i]).." attached as \""..periList[i].."\".")
	end
end

function run()
	start_main_loop_timer()
	while (true) do
		xpcall( wait_for_events, myerrorhandler )
	end
end